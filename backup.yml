---

- name: Deploy PostgreSQL standalone | Pre-checks servers for playbook
  hosts: hosts_backup
  become: true
  become_method: sudo
  gather_facts: true
  tags: always
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:

    - name: System information
      ansible.builtin.debug:
        var: system_info
      vars:
        system_info:
          OS: "{{ ansible_distribution | default('N/A') }} {{ ansible_distribution_version | default('N/A') }}"
          Kernel: "{{ ansible_kernel | default('N/A') }}"
          CPU model: >-
            {{ ansible_processor[2] | default('N/A') }},
            count: {{ ansible_processor_count | default('N/A') }},
            cores: {{ ansible_processor_cores | default('N/A') }}
          Memory: "{{ (ansible_memtotal_mb / 1024) | round(2) if ansible_memtotal_mb is defined else 'N/A' }} GB"
          Disk space total: >-
            {{
              (ansible_mounts
                | map(attribute='size_total')
                | map('int')
                | sum / 1024 / 1024 / 1024
              )
              | round(2) if ansible_mounts is defined else 'N/A'
            }} GB
          Architecture: "{{ ansible_architecture | default('N/A') }}"
          Virtualization type: "{{ ansible_virtualization_type | default('N/A') }}"
          Product name: "{{ ansible_product_name | default('N/A') }}"
      tags: always

  tasks:

  - name: Get default IPv4 IP address
    debug:
      msg: "Default IPv4 IP Address: {{ ansible_default_ipv4.address }}"

  - name: Run patronictl list
    command: patronictl -c /etc/patroni/patroni.yml list
    register: patronictl_output
    ignore_errors: true

  - name: Fail if patronictl command failed
    fail:
      msg: "Failed to get Patroni list using patronictl"
    when: patronictl_output.rc != 0

  - name: Parse patronictl output and set facts
    set_fact:
      patroni_members: "{{ patronictl_output.stdout_lines | select('search', '\\|.*running.*\\|') | map('regex_replace', '^\\|\\s*(.*?)\\s*\\|\\s*(.*?)\\s*\\|.*$', '\\1:\\2') | list }}"
      patroni_leader_name: "{{ patronictl_output.stdout_lines | select('search', '\\|.*Leader.*\\|') | map('regex_replace', '^\\|\\s*(.*?)\\s*\\|.*$', '\\1') | first | default('No leader found') }}"
    when: patronictl_output.rc == 0 

  - name: Parse patronictl output and set facts
    set_fact:
      patroni_leader_ip: "{{ patroni_members | select('search', '^' + patroni_leader_name + ':') | map('regex_replace', '^.*?:(.*)$', '\\1') | first | default('No leader ip found') }}"
    when: patronictl_output.rc == 0 and patroni_leader_name != 'No leader found'

  - name: Print the master node
    debug:
      msg: "The current master node is: {{ patroni_leader_name }} {{ patroni_leader_ip }}"
    when: patronictl_output.rc == 0

  - name: Create directory for dumps on leader
    file:
      path: /var/lib/postgresql/dump
      state: directory
      owner: postgres
      group: postgres
      mode: '0755'
    delegate_to: "{{ patroni_leader_ip }}"
    run_once: true
    become: yes
    become_user: postgres
    when: patroni_leader_ip != 'No leader ip found'

  - name: Check if database exists using psql
    command: psql -U postgres -d postgres -c "SELECT true FROM pg_database WHERE datname='{{ item }}';"
    register: psql_result
    delegate_to: "{{ patroni_leader_ip }}"
    become: yes
    become_user: postgres    
    loop: "{{ database_name }}"
    ignore_errors: true  # Игнорируем ошибки, потому что запрос вернет ошибку, если базы нет.

  - name: Display disk space information
    debug:
      msg: "{{ psql_result.results[item] }}"
    loop: "{{ range(database_name | length) | list }}"
    loop_control:
      loop_var: item

  - name: Fail if any database does not exist
    fail:
      msg: "Database {{ database_names[item] }} does not exist. Aborting playbook."
    when: "'(0 rows)' in psql_result.results[item].stdout"
    loop: "{{ range(database_names | length) | list }}"
    loop_control:
      loop_var: item

  - name: Run pg_dump on leader
    command: "pg_dump -U postgres -d {{ database }} -f //var/lib/postgresql/dump/{{ database }}_{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}.dump"
    register: pg_dump_output
    delegate_to: "{{ patroni_leader_ip }}"
    become: yes
    become_user: postgres
    with_items: "{{ database_name }}"
    loop_control:
      loop_var: database
    when: patroni_leader_ip != 'No leader ip found'

  - name: Fail if pg_dump failed
    fail:
      msg: "Failed to run pg_dump for database {{ database_name[item] }}"
    when: pg_dump_output.results[item].rc != 0 and patroni_leader_ip != 'No leader ip found'
    with_items: "{{ range(database_name | length) | list }}"
    loop_control:
      loop_var: item

  - name: Print backup information
    debug:
      msg: "Backup was created on host {{ patroni_leader_ip }}, and saved to file /var/lib/postgresq/dump/{{ database }}_{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}.dump"
    with_items: "{{ database_name }}"
    loop_control:
      loop_var: database   
    when: patroni_leader_ip != 'No leader ip found'

  - name: Get disk space information
    command: df -h /var/lib/postgresql/dump
    register: disk_space_info
    become: yes  # Требуются права root для выполнения df
    become_user: root  # Явное указание пользователя root

  - name: Display disk space information
    debug:
      msg: "{{ disk_space_info.stdout_lines }}"