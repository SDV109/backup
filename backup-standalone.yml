---

- name: Deploy PostgreSQL standalone | Pre-checks servers for playbook
  hosts: hosts_backup
  become: true
  become_method: sudo
  gather_facts: true
  tags: always
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:

    - name: System information
      ansible.builtin.debug:
        var: system_info
      vars:
        system_info:
          OS: "{{ ansible_distribution | default('N/A') }} {{ ansible_distribution_version | default('N/A') }}"
          Kernel: "{{ ansible_kernel | default('N/A') }}"
          CPU model: >-
            {{ ansible_processor[2] | default('N/A') }},
            count: {{ ansible_processor_count | default('N/A') }},
            cores: {{ ansible_processor_cores | default('N/A') }}
          Memory: "{{ (ansible_memtotal_mb / 1024) | round(2) if ansible_memtotal_mb is defined else 'N/A' }} GB"
          Disk space total: >-
            {{
              (ansible_mounts
                | map(attribute='size_total')
                | map('int')
                | sum / 1024 / 1024 / 1024
              )
              | round(2) if ansible_mounts is defined else 'N/A'
            }} GB
          Architecture: "{{ ansible_architecture | default('N/A') }}"
          Virtualization type: "{{ ansible_virtualization_type | default('N/A') }}"
          Product name: "{{ ansible_product_name | default('N/A') }}"
      tags: always

  tasks:

  - name: Create directory for dumps on leader
    file:
      path: /var/lib/postgresql/dump
      state: directory
      owner: postgres
      group: postgres
      mode: '0755'
    become: yes
    become_user: postgres

  - name: Check if database exists using psql
    command: psql -U postgres -p "{{ pg_port | default(5432) }}" -d postgres -c "SELECT true FROM pg_database WHERE datname='{{ item }}';"
    register: database_exists_result
    become: yes
    become_user: postgres    
    loop: "{{ database_name }}"
    ignore_errors: true  # Игнорируем ошибки, потому что запрос вернет ошибку, если базы нет.

  - name: Fail if any database does not exist
    fail:
      msg: "Database {{ database_name[item] }} does not exist. Aborting playbook."
    when: "'(0 rows)' in database_exists_result.results[item].stdout"
    loop: "{{ range(database_name | length) | list }}"
    loop_control:
      loop_var: item
#-------------------------------

  - name: Get size of each database (using awk)
    shell: "psql -U postgres -p {{ pg_port | default(5432) }} -d postgres -c \"SELECT pg_database_size(datname) FROM pg_database WHERE datname='{{ item }}';\" | awk 'NR==3 {print $1}'"
    register: db_size_result
    loop: "{{ database_name }}"
    loop_control:
      loop_var: item
    ignore_errors: true # чтобы продолжить, даже если база не найдена

  - name: Collect database sizes
    set_fact:
      all_db_sizes: "{{ all_db_sizes | default([]) + [db_size_result.results[item].stdout] }}"
    loop: "{{ range(database_name | length) | list }}"
    loop_control:
      loop_var: item

  - name: Convert all database sizes to integers
    set_fact:
      db_sizes: "{{ all_db_sizes | map('int') | list }}"
    when: all_db_sizes is defined

  - name: Calculate total database size
    set_fact:
      total_db_size: "{{ db_sizes | sum(start=0) }}"
    when: db_sizes is defined

  - name: Get free disk space
    shell: "df -B1 /var/lib/postgresql/dump/ | tail -1 | awk '{print $4}'"
    register: disk_space
    become: yes  # Требуются права root для выполнения df
    become_user: root  # Явное указание пользователя root

  - name: Convert free disk space to integer
    set_fact:
      free_disk_space: "{{ disk_space.stdout | int }}"
    when: disk_space.stdout is defined

  - name: Print database names and sizes in MB
    debug:
      msg: "Database {{ database_name[item] }} size: {{ (db_sizes[item] / (1024 * 1024)) | round(2) }} MB"
    loop: "{{ range(database_name | length) | list }}"
    loop_control:
      loop_var: item
    when: total_db_size > free_disk_space and total_db_size is defined and db_sizes is defined

  - name: Print all variables
    debug:
      msg: "Database {{ database_name[item] }} size: {{ total_db_size }}, free_disk_space {{ free_disk_space }}"
    loop: "{{ range(database_name | length) | list }}"
    loop_control:
      loop_var: item
    when: total_db_size > free_disk_space and total_db_size is defined and db_sizes is defined

  - name: Fail if not enough disk space
    fail:
      msg: "Not enough disk space. Total database size: {{ (total_db_size | int / (1024 * 1024)) | round(2) }} MB. Free disk space: {{ (free_disk_space | int / (1024 * 1024)) | round(2) }} MB."
    when: total_db_size > free_disk_space and total_db_size is defined

#-------------------------------
  - name: Run pg_dump
    command: "pg_dump -U postgres -p {{ pg_port | default(5432) }} -d {{ database }} -f /var/lib/postgresql/dump/{{ database }}_{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}.dump"
    register: pg_dump_output
    become: yes
    become_user: postgres
    with_items: "{{ database_name }}"
    loop_control:
      loop_var: database

  - name: Fail if pg_dump failed
    fail:
      msg: "Failed to run pg_dump for database {{ database_name[item] }}"
    when: pg_dump_output.results[item].rc != 0 
    with_items: "{{ range(database_name | length) | list }}"
    loop_control:
      loop_var: item

  - name: Print backup information
    debug:
      msg: "Backup was created on {{ ansible_default_ipv4.address }}, and saved to file /var/lib/postgresq/dump/{{ database }}_{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}.dump"
    with_items: "{{ database_name }}"
    loop_control:
      loop_var: database   

  - name: Get disk space information
    command: df -h /var/lib/postgresql/dump/
    register: disk_space_info
    become: yes
    become_user: root

  - name: Display disk space information
    debug:
      msg: "{{ disk_space_info.stdout_lines }}"